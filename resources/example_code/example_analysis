{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b92366c6-7fd3-43ff-8322-d392d7be6aa7",
   "metadata": {},
   "source": [
    "# 1. Getting data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5bb94b5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import math and numpy first\n",
    "import math\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "\n",
    "# import scipy for stats package\n",
    "import scipy\n",
    "\n",
    "# import pandas\n",
    "import pandas as pd\n",
    "\n",
    "# import some data and classifiers to play with; you may want to add more\n",
    "from sklearn import datasets\n",
    "from sklearn import neighbors\n",
    "from sklearn import tree\n",
    "from sklearn import ensemble\n",
    "from sklearn.neighbors import NearestNeighbors\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "# import some validation tools\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import RepeatedKFold\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn import metrics\n",
    "from sklearn import preprocessing\n",
    "from sklearn.model_selection import StratifiedKFold, GridSearchCV\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn.model_selection import validation_curve\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "# import other features\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b2d5cb76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tid</th>\n",
       "      <th>loudness</th>\n",
       "      <th>tempo</th>\n",
       "      <th>time_siganture</th>\n",
       "      <th>key</th>\n",
       "      <th>major/minor</th>\n",
       "      <th>duration</th>\n",
       "      <th>instrumentalness</th>\n",
       "      <th>speechiness</th>\n",
       "      <th>acousticness</th>\n",
       "      <th>danceability</th>\n",
       "      <th>liveness</th>\n",
       "      <th>energy</th>\n",
       "      <th>valence</th>\n",
       "      <th>pid</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>609E1JCInJncactoMmkDon</td>\n",
       "      <td>0.205014</td>\n",
       "      <td>-0.947590</td>\n",
       "      <td>0.123077</td>\n",
       "      <td>-0.041589</td>\n",
       "      <td>-1.192173</td>\n",
       "      <td>-0.087057</td>\n",
       "      <td>0.000837</td>\n",
       "      <td>0.1360</td>\n",
       "      <td>0.73600</td>\n",
       "      <td>0.768</td>\n",
       "      <td>0.1730</td>\n",
       "      <td>0.644</td>\n",
       "      <td>0.530</td>\n",
       "      <td>37i9dQZF1DX10zKzsJ2jva</td>\n",
       "      <td>Viva Latino</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>0J9g1MMJDhyvOb3NWckHMm</td>\n",
       "      <td>1.055163</td>\n",
       "      <td>-0.876168</td>\n",
       "      <td>0.123077</td>\n",
       "      <td>-0.041589</td>\n",
       "      <td>-1.192173</td>\n",
       "      <td>0.358922</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.1260</td>\n",
       "      <td>0.06020</td>\n",
       "      <td>0.852</td>\n",
       "      <td>0.0682</td>\n",
       "      <td>0.881</td>\n",
       "      <td>0.556</td>\n",
       "      <td>37i9dQZF1DX10zKzsJ2jva</td>\n",
       "      <td>Viva Latino</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>4PA1wK0leCjmRZlP5dQ8Lv</td>\n",
       "      <td>0.035809</td>\n",
       "      <td>-0.544542</td>\n",
       "      <td>0.123077</td>\n",
       "      <td>1.334231</td>\n",
       "      <td>-1.192173</td>\n",
       "      <td>-0.145022</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0515</td>\n",
       "      <td>0.06870</td>\n",
       "      <td>0.715</td>\n",
       "      <td>0.0997</td>\n",
       "      <td>0.642</td>\n",
       "      <td>0.169</td>\n",
       "      <td>37i9dQZF1DX10zKzsJ2jva</td>\n",
       "      <td>Viva Latino</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>6hwGwCfCwHoSJQw7AYPEQu</td>\n",
       "      <td>0.013138</td>\n",
       "      <td>-0.837318</td>\n",
       "      <td>0.123077</td>\n",
       "      <td>0.783903</td>\n",
       "      <td>-1.192173</td>\n",
       "      <td>-0.478795</td>\n",
       "      <td>0.002140</td>\n",
       "      <td>0.0616</td>\n",
       "      <td>0.00362</td>\n",
       "      <td>0.844</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.598</td>\n",
       "      <td>0.393</td>\n",
       "      <td>37i9dQZF1DX10zKzsJ2jva</td>\n",
       "      <td>Viva Latino</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>6uIIdjYTxxpWOyWuVXrKQO</td>\n",
       "      <td>0.577637</td>\n",
       "      <td>0.156010</td>\n",
       "      <td>-2.211283</td>\n",
       "      <td>1.334231</td>\n",
       "      <td>-1.192173</td>\n",
       "      <td>-0.142395</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.0408</td>\n",
       "      <td>0.18300</td>\n",
       "      <td>0.808</td>\n",
       "      <td>0.1380</td>\n",
       "      <td>0.944</td>\n",
       "      <td>0.937</td>\n",
       "      <td>37i9dQZF1DX10zKzsJ2jva</td>\n",
       "      <td>Viva Latino</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>432</th>\n",
       "      <td>7ErtOGQ9DwyQa3lwP77j4u</td>\n",
       "      <td>0.590827</td>\n",
       "      <td>2.920622</td>\n",
       "      <td>0.123077</td>\n",
       "      <td>0.783903</td>\n",
       "      <td>0.838804</td>\n",
       "      <td>0.298960</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.2400</td>\n",
       "      <td>0.63600</td>\n",
       "      <td>0.727</td>\n",
       "      <td>0.1060</td>\n",
       "      <td>0.600</td>\n",
       "      <td>0.754</td>\n",
       "      <td>37i9dQZF1DWYkaDif7Ztbp</td>\n",
       "      <td>African Heat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>433</th>\n",
       "      <td>4AxG1T6UJJ4xCX4Wz6JDLG</td>\n",
       "      <td>-0.222636</td>\n",
       "      <td>0.118047</td>\n",
       "      <td>2.457437</td>\n",
       "      <td>1.334231</td>\n",
       "      <td>-1.192173</td>\n",
       "      <td>-0.265341</td>\n",
       "      <td>0.000012</td>\n",
       "      <td>0.0684</td>\n",
       "      <td>0.59200</td>\n",
       "      <td>0.559</td>\n",
       "      <td>0.0909</td>\n",
       "      <td>0.453</td>\n",
       "      <td>0.622</td>\n",
       "      <td>37i9dQZF1DWYkaDif7Ztbp</td>\n",
       "      <td>African Heat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>434</th>\n",
       "      <td>1oq33HJBs0rDmjjZ2rVFyG</td>\n",
       "      <td>0.230158</td>\n",
       "      <td>-0.284078</td>\n",
       "      <td>0.123077</td>\n",
       "      <td>-1.142245</td>\n",
       "      <td>0.838804</td>\n",
       "      <td>0.623235</td>\n",
       "      <td>0.001290</td>\n",
       "      <td>0.0394</td>\n",
       "      <td>0.02590</td>\n",
       "      <td>0.845</td>\n",
       "      <td>0.0724</td>\n",
       "      <td>0.638</td>\n",
       "      <td>0.839</td>\n",
       "      <td>37i9dQZF1DWYkaDif7Ztbp</td>\n",
       "      <td>African Heat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>5dVJTSZhL2n81ZkT4PZu0x</td>\n",
       "      <td>0.060128</td>\n",
       "      <td>-0.912802</td>\n",
       "      <td>0.123077</td>\n",
       "      <td>-0.316753</td>\n",
       "      <td>-1.192173</td>\n",
       "      <td>-0.798087</td>\n",
       "      <td>0.005920</td>\n",
       "      <td>0.1090</td>\n",
       "      <td>0.11300</td>\n",
       "      <td>0.898</td>\n",
       "      <td>0.1730</td>\n",
       "      <td>0.735</td>\n",
       "      <td>0.403</td>\n",
       "      <td>37i9dQZF1DWYkaDif7Ztbp</td>\n",
       "      <td>African Heat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>0zVk3uuV9UhxAt48F3OL12</td>\n",
       "      <td>-0.655233</td>\n",
       "      <td>-0.248663</td>\n",
       "      <td>0.123077</td>\n",
       "      <td>-0.041589</td>\n",
       "      <td>-1.192173</td>\n",
       "      <td>-0.237977</td>\n",
       "      <td>0.031600</td>\n",
       "      <td>0.0637</td>\n",
       "      <td>0.47100</td>\n",
       "      <td>0.823</td>\n",
       "      <td>0.1280</td>\n",
       "      <td>0.415</td>\n",
       "      <td>0.488</td>\n",
       "      <td>37i9dQZF1DWYkaDif7Ztbp</td>\n",
       "      <td>African Heat</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>76 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        tid  loudness     tempo  time_siganture       key  \\\n",
       "57   609E1JCInJncactoMmkDon  0.205014 -0.947590        0.123077 -0.041589   \n",
       "58   0J9g1MMJDhyvOb3NWckHMm  1.055163 -0.876168        0.123077 -0.041589   \n",
       "59   4PA1wK0leCjmRZlP5dQ8Lv  0.035809 -0.544542        0.123077  1.334231   \n",
       "60   6hwGwCfCwHoSJQw7AYPEQu  0.013138 -0.837318        0.123077  0.783903   \n",
       "61   6uIIdjYTxxpWOyWuVXrKQO  0.577637  0.156010       -2.211283  1.334231   \n",
       "..                      ...       ...       ...             ...       ...   \n",
       "432  7ErtOGQ9DwyQa3lwP77j4u  0.590827  2.920622        0.123077  0.783903   \n",
       "433  4AxG1T6UJJ4xCX4Wz6JDLG -0.222636  0.118047        2.457437  1.334231   \n",
       "434  1oq33HJBs0rDmjjZ2rVFyG  0.230158 -0.284078        0.123077 -1.142245   \n",
       "435  5dVJTSZhL2n81ZkT4PZu0x  0.060128 -0.912802        0.123077 -0.316753   \n",
       "436  0zVk3uuV9UhxAt48F3OL12 -0.655233 -0.248663        0.123077 -0.041589   \n",
       "\n",
       "     major/minor  duration  instrumentalness  speechiness  acousticness  \\\n",
       "57     -1.192173 -0.087057          0.000837       0.1360       0.73600   \n",
       "58     -1.192173  0.358922          0.000006       0.1260       0.06020   \n",
       "59     -1.192173 -0.145022          0.000000       0.0515       0.06870   \n",
       "60     -1.192173 -0.478795          0.002140       0.0616       0.00362   \n",
       "61     -1.192173 -0.142395          0.000001       0.0408       0.18300   \n",
       "..           ...       ...               ...          ...           ...   \n",
       "432     0.838804  0.298960          0.000005       0.2400       0.63600   \n",
       "433    -1.192173 -0.265341          0.000012       0.0684       0.59200   \n",
       "434     0.838804  0.623235          0.001290       0.0394       0.02590   \n",
       "435    -1.192173 -0.798087          0.005920       0.1090       0.11300   \n",
       "436    -1.192173 -0.237977          0.031600       0.0637       0.47100   \n",
       "\n",
       "     danceability  liveness  energy  valence                     pid  \\\n",
       "57          0.768    0.1730   0.644    0.530  37i9dQZF1DX10zKzsJ2jva   \n",
       "58          0.852    0.0682   0.881    0.556  37i9dQZF1DX10zKzsJ2jva   \n",
       "59          0.715    0.0997   0.642    0.169  37i9dQZF1DX10zKzsJ2jva   \n",
       "60          0.844    0.0869   0.598    0.393  37i9dQZF1DX10zKzsJ2jva   \n",
       "61          0.808    0.1380   0.944    0.937  37i9dQZF1DX10zKzsJ2jva   \n",
       "..            ...       ...     ...      ...                     ...   \n",
       "432         0.727    0.1060   0.600    0.754  37i9dQZF1DWYkaDif7Ztbp   \n",
       "433         0.559    0.0909   0.453    0.622  37i9dQZF1DWYkaDif7Ztbp   \n",
       "434         0.845    0.0724   0.638    0.839  37i9dQZF1DWYkaDif7Ztbp   \n",
       "435         0.898    0.1730   0.735    0.403  37i9dQZF1DWYkaDif7Ztbp   \n",
       "436         0.823    0.1280   0.415    0.488  37i9dQZF1DWYkaDif7Ztbp   \n",
       "\n",
       "              name  \n",
       "57     Viva Latino  \n",
       "58     Viva Latino  \n",
       "59     Viva Latino  \n",
       "60     Viva Latino  \n",
       "61     Viva Latino  \n",
       "..             ...  \n",
       "432   African Heat  \n",
       "433   African Heat  \n",
       "434   African Heat  \n",
       "435   African Heat  \n",
       "436   African Heat  \n",
       "\n",
       "[76 rows x 16 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load spotify data as pandas dataframe\n",
    "df1 = pd.read_csv('data/merged_data.csv')\n",
    "\n",
    "# only include 4 manually selected playlists\n",
    "df = df.loc[ (df1['pid'] == '37i9dQZF1DX10zKzsJ2jva') | (df1['pid'] == '37i9dQZF1DX4sWSpwq3LiO') | (df1['pid'] == '37i9dQZF1DX2A29LI7xHn1') | (df1['pid'] == '37i9dQZF1DWYkaDif7Ztbp')]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c06c99e0-6339-4e86-9a24-5882a9edd5d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# key variables declaration\n",
    "target = df.pop('pid')\n",
    "target_label = df.pop('name')\n",
    "tids = df.pop('tid')\n",
    "\n",
    "target_unique_labels = [\"Viva Latino\", \"Peaceful Piano\", \"Signed XOXO\", \"African Heat\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9f760c4-a853-4651-9d96-2ff899d9bbb0",
   "metadata": {},
   "source": [
    "# 2. Data Pre-Processing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4837c11d-8878-43e8-b254-9c275f299dc5",
   "metadata": {},
   "source": [
    "## 2.1. Understand data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "10667b1f-df8d-43f3-9abf-7d1d3e185bc5",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df_dup' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [4]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# balanced class! \u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43mdf_dup\u001b[49m\u001b[38;5;241m.\u001b[39mcolumns)\n\u001b[1;32m      3\u001b[0m df_dup[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mvalue_counts()\n",
      "\u001b[0;31mNameError\u001b[0m: name 'df_dup' is not defined"
     ]
    }
   ],
   "source": [
    "# # balanced class! \n",
    "# print(df_dup.columns)\n",
    "# df_dup['name'].value_counts() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a60eab4-e525-4ed4-b518-a2bfedbed638",
   "metadata": {},
   "source": [
    "## 2.1. normalize data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "86091434-36b7-441d-9581-7745fc349390",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_952171/1066744521.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['loudness'] = zscore(df['loudness'])\n",
      "/tmp/ipykernel_952171/1066744521.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['tempo'] = zscore(df['tempo'])\n",
      "/tmp/ipykernel_952171/1066744521.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['time_siganture'] = zscore(df['time_siganture'])\n",
      "/tmp/ipykernel_952171/1066744521.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['key'] = zscore(df['key'])\n",
      "/tmp/ipykernel_952171/1066744521.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['major/minor'] = zscore(df['major/minor'])\n",
      "/tmp/ipykernel_952171/1066744521.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['duration'] = zscore(df['duration'])\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loudness</th>\n",
       "      <th>tempo</th>\n",
       "      <th>time_siganture</th>\n",
       "      <th>key</th>\n",
       "      <th>major/minor</th>\n",
       "      <th>duration</th>\n",
       "      <th>instrumentalness</th>\n",
       "      <th>speechiness</th>\n",
       "      <th>acousticness</th>\n",
       "      <th>danceability</th>\n",
       "      <th>liveness</th>\n",
       "      <th>energy</th>\n",
       "      <th>valence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>0.483715</td>\n",
       "      <td>-0.753214</td>\n",
       "      <td>0.161123</td>\n",
       "      <td>-0.033252</td>\n",
       "      <td>-1.347151</td>\n",
       "      <td>0.228779</td>\n",
       "      <td>0.000837</td>\n",
       "      <td>0.1360</td>\n",
       "      <td>0.73600</td>\n",
       "      <td>0.768</td>\n",
       "      <td>0.1730</td>\n",
       "      <td>0.644</td>\n",
       "      <td>0.530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>0.879659</td>\n",
       "      <td>-0.683400</td>\n",
       "      <td>0.161123</td>\n",
       "      <td>-0.033252</td>\n",
       "      <td>-1.347151</td>\n",
       "      <td>0.826596</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.1260</td>\n",
       "      <td>0.06020</td>\n",
       "      <td>0.852</td>\n",
       "      <td>0.0682</td>\n",
       "      <td>0.881</td>\n",
       "      <td>0.556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>0.404911</td>\n",
       "      <td>-0.359235</td>\n",
       "      <td>0.161123</td>\n",
       "      <td>1.370703</td>\n",
       "      <td>-1.347151</td>\n",
       "      <td>0.151080</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0515</td>\n",
       "      <td>0.06870</td>\n",
       "      <td>0.715</td>\n",
       "      <td>0.0997</td>\n",
       "      <td>0.642</td>\n",
       "      <td>0.169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>0.394352</td>\n",
       "      <td>-0.645424</td>\n",
       "      <td>0.161123</td>\n",
       "      <td>0.809121</td>\n",
       "      <td>-1.347151</td>\n",
       "      <td>-0.296330</td>\n",
       "      <td>0.002140</td>\n",
       "      <td>0.0616</td>\n",
       "      <td>0.00362</td>\n",
       "      <td>0.844</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.598</td>\n",
       "      <td>0.393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>0.657259</td>\n",
       "      <td>0.325553</td>\n",
       "      <td>-2.287943</td>\n",
       "      <td>1.370703</td>\n",
       "      <td>-1.347151</td>\n",
       "      <td>0.154601</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.0408</td>\n",
       "      <td>0.18300</td>\n",
       "      <td>0.808</td>\n",
       "      <td>0.1380</td>\n",
       "      <td>0.944</td>\n",
       "      <td>0.937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>432</th>\n",
       "      <td>0.663402</td>\n",
       "      <td>3.027956</td>\n",
       "      <td>0.161123</td>\n",
       "      <td>0.809121</td>\n",
       "      <td>0.742307</td>\n",
       "      <td>0.746220</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.2400</td>\n",
       "      <td>0.63600</td>\n",
       "      <td>0.727</td>\n",
       "      <td>0.1060</td>\n",
       "      <td>0.600</td>\n",
       "      <td>0.754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>433</th>\n",
       "      <td>0.284544</td>\n",
       "      <td>0.288443</td>\n",
       "      <td>2.610189</td>\n",
       "      <td>1.370703</td>\n",
       "      <td>-1.347151</td>\n",
       "      <td>-0.010203</td>\n",
       "      <td>0.000012</td>\n",
       "      <td>0.0684</td>\n",
       "      <td>0.59200</td>\n",
       "      <td>0.559</td>\n",
       "      <td>0.0909</td>\n",
       "      <td>0.453</td>\n",
       "      <td>0.622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>434</th>\n",
       "      <td>0.495426</td>\n",
       "      <td>-0.104633</td>\n",
       "      <td>0.161123</td>\n",
       "      <td>-1.156415</td>\n",
       "      <td>0.742307</td>\n",
       "      <td>1.180898</td>\n",
       "      <td>0.001290</td>\n",
       "      <td>0.0394</td>\n",
       "      <td>0.02590</td>\n",
       "      <td>0.845</td>\n",
       "      <td>0.0724</td>\n",
       "      <td>0.638</td>\n",
       "      <td>0.839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>0.416237</td>\n",
       "      <td>-0.719209</td>\n",
       "      <td>0.161123</td>\n",
       "      <td>-0.314043</td>\n",
       "      <td>-1.347151</td>\n",
       "      <td>-0.724328</td>\n",
       "      <td>0.005920</td>\n",
       "      <td>0.1090</td>\n",
       "      <td>0.11300</td>\n",
       "      <td>0.898</td>\n",
       "      <td>0.1730</td>\n",
       "      <td>0.735</td>\n",
       "      <td>0.403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>0.083069</td>\n",
       "      <td>-0.070014</td>\n",
       "      <td>0.161123</td>\n",
       "      <td>-0.033252</td>\n",
       "      <td>-1.347151</td>\n",
       "      <td>0.026476</td>\n",
       "      <td>0.031600</td>\n",
       "      <td>0.0637</td>\n",
       "      <td>0.47100</td>\n",
       "      <td>0.823</td>\n",
       "      <td>0.1280</td>\n",
       "      <td>0.415</td>\n",
       "      <td>0.488</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>76 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     loudness     tempo  time_siganture       key  major/minor  duration  \\\n",
       "57   0.483715 -0.753214        0.161123 -0.033252    -1.347151  0.228779   \n",
       "58   0.879659 -0.683400        0.161123 -0.033252    -1.347151  0.826596   \n",
       "59   0.404911 -0.359235        0.161123  1.370703    -1.347151  0.151080   \n",
       "60   0.394352 -0.645424        0.161123  0.809121    -1.347151 -0.296330   \n",
       "61   0.657259  0.325553       -2.287943  1.370703    -1.347151  0.154601   \n",
       "..        ...       ...             ...       ...          ...       ...   \n",
       "432  0.663402  3.027956        0.161123  0.809121     0.742307  0.746220   \n",
       "433  0.284544  0.288443        2.610189  1.370703    -1.347151 -0.010203   \n",
       "434  0.495426 -0.104633        0.161123 -1.156415     0.742307  1.180898   \n",
       "435  0.416237 -0.719209        0.161123 -0.314043    -1.347151 -0.724328   \n",
       "436  0.083069 -0.070014        0.161123 -0.033252    -1.347151  0.026476   \n",
       "\n",
       "     instrumentalness  speechiness  acousticness  danceability  liveness  \\\n",
       "57           0.000837       0.1360       0.73600         0.768    0.1730   \n",
       "58           0.000006       0.1260       0.06020         0.852    0.0682   \n",
       "59           0.000000       0.0515       0.06870         0.715    0.0997   \n",
       "60           0.002140       0.0616       0.00362         0.844    0.0869   \n",
       "61           0.000001       0.0408       0.18300         0.808    0.1380   \n",
       "..                ...          ...           ...           ...       ...   \n",
       "432          0.000005       0.2400       0.63600         0.727    0.1060   \n",
       "433          0.000012       0.0684       0.59200         0.559    0.0909   \n",
       "434          0.001290       0.0394       0.02590         0.845    0.0724   \n",
       "435          0.005920       0.1090       0.11300         0.898    0.1730   \n",
       "436          0.031600       0.0637       0.47100         0.823    0.1280   \n",
       "\n",
       "     energy  valence  \n",
       "57    0.644    0.530  \n",
       "58    0.881    0.556  \n",
       "59    0.642    0.169  \n",
       "60    0.598    0.393  \n",
       "61    0.944    0.937  \n",
       "..      ...      ...  \n",
       "432   0.600    0.754  \n",
       "433   0.453    0.622  \n",
       "434   0.638    0.839  \n",
       "435   0.735    0.403  \n",
       "436   0.415    0.488  \n",
       "\n",
       "[76 rows x 13 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats import zscore\n",
    "\n",
    "df['loudness'] = zscore(df['loudness'])\n",
    "df['tempo'] = zscore(df['tempo'])\n",
    "df['time_siganture'] = zscore(df['time_siganture'])\n",
    "df['key'] = zscore(df['key'])\n",
    "df['major/minor'] = zscore(df['major/minor'])\n",
    "df['duration'] = zscore(df['duration'])\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca73eff5-8d93-441b-aa00-da499d847377",
   "metadata": {},
   "source": [
    "## 2.2 Feature reduction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ab4342da-0295-4407-88a4-7498e5d2fb90",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #TODO: add hyperparameter turning for PCA\n",
    "\n",
    "# # PCA for dimensionality reduction\n",
    "# pca = PCA(n_components = 3)\n",
    "# reduced_features = pca.fit(df)\n",
    "# reduced_features = pca.fit_transform(df)\n",
    "# print(pca.explained_variance_ratio_)\n",
    "# print()\n",
    "\n",
    "# # The estimated noise covariance following the Probabilistic PCA model from Tipping and Bishop 1999. \n",
    "# # See “Pattern Recognition and Machine Learning” by C. Bishop, 12.2.1 p. 574 or\n",
    "# # http://www.miketipping.com/papers/met-mppca.pdf. It is required to compute the estimated data covariance and score samples.\n",
    "# print(pca.noise_variance_)\n",
    "# var_ratio = []\n",
    "# var_ratio = [var_ratio.append(np.sum(pca.explained_variance_ratio_))]\n",
    "\n",
    "# plt.figure(figsize=(4,2),dpi=150)\n",
    "# plt.grid()\n",
    "# plt.plot(3,var_ratio, marker='o')\n",
    "# plt.xlabel('n_components')\n",
    "# plt.ylabel('Explained variance ratio')\n",
    "# plt.title('n_components vs. Explained Variance Ratio')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7939d9e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pca = PCA(n_components=2)\n",
    "pca.fit(df)\n",
    "pca_1 = pca.transform(df)\n",
    "\n",
    "PC1 = pca_1[:,0]\n",
    "PC2 = pca_1[:,1]\n",
    "\n",
    "zipped = list(zip(PC1, \n",
    "                  PC2, \n",
    "                  target_label))\n",
    " \n",
    "pc_df = pd.DataFrame(zipped, \n",
    "                     columns=['PC1', \n",
    "                              'PC2',\n",
    "                              'Label'])\n",
    " \n",
    "plt.figure(figsize=(12,7))\n",
    " \n",
    "sns.scatterplot(data=pc_df, \n",
    "                x=\"PC1\", \n",
    "                y=\"PC2\", \n",
    "                hue=\"Label\")\n",
    " \n",
    "plt.title(\"PCA\",\n",
    "          fontsize=16)\n",
    "plt.xlabel('First Principal Component',\n",
    "           fontsize=16)\n",
    "plt.ylabel('Second Principal Component',\n",
    "           fontsize=16)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ecf7982-5a91-4e9b-9ea6-548a4fffde57",
   "metadata": {},
   "source": [
    "# 3. Fit Algorithmic Models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58fa62b0",
   "metadata": {},
   "source": [
    "## I. Multiple Classifiers using SKLearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c883a04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# KNN\n",
    "knn = neighbors.KNeighborsClassifier(metric='euclidean', n_neighbors=1)\n",
    "knn.fit(X_train, y_train)\n",
    "\n",
    "# performance on normal knn\n",
    "score = knn.score(X_test, y_test)\n",
    "print(\"Accuracy:\", score)\n",
    "\n",
    "# performance with cross validation\n",
    "scores = cross_val_score(knn, df, target, cv=5)\n",
    "print(\"\\nCross Validation Scores:\", scores)\n",
    "print('Mean Accuracy:', scores.mean(), ', stdDev:', scores.std(), '\\n')\n",
    "\n",
    "print(scipy.stats.describe(scores))\n",
    "\n",
    "# performance with repeated K-Fold Cross Validation\n",
    "rkf = RepeatedKFold(n_splits = 5, n_repeats = 3)\n",
    "knn_scores = cross_val_score(knn, df, target, cv = rkf)\n",
    "print('\\nK-Fold Cross Validation Scores:', knn_scores)\n",
    "print('Mean Accuracy:', knn_scores.mean(), '\\nstdDev:', knn_scores.std(), '\\n')\n",
    "print('>> ', scipy.stats.describe(knn_scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58ba632b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create and train dt classifier\n",
    "dt = tree.DecisionTreeClassifier()\n",
    "dt = dt.fit(X_train, y_train)\n",
    "\n",
    "# performance on normal dt\n",
    "y_predicted = dt.predict(X_test)\n",
    "score = metrics.accuracy_score(y_test, y_predicted)\n",
    "print(\"Accuracy: \", score)\n",
    "\n",
    "# performance with cross validation\n",
    "scores = cross_val_score(dt, df, target, cv=5)\n",
    "print(\"\\nCross Validation Scores:\", scores)\n",
    "print('Mean Accuracy:', scores.mean(), ', stdDev:', scores.std(), '\\n')\n",
    "\n",
    "print(scipy.stats.describe(scores))\n",
    "\n",
    "# performance with repeated K-Fold Cross Validation\n",
    "rkf = RepeatedKFold(n_splits = 5, n_repeats = 3)\n",
    "dt_scores = cross_val_score(dt, df, target, cv = rkf)\n",
    "print('\\nK-Fold Cross Validation Scores:', dt_scores)\n",
    "print('Mean Accuracy:', dt_scores.mean(), '\\nstdDev:', dt_scores.std(), '\\n')\n",
    "print('>> ', scipy.stats.describe(dt_scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7581dacd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create and train logistic regression classifier\n",
    "sgd = SGDClassifier(loss='log_loss', max_iter=100,shuffle=False, tol=None, \\\n",
    "                    penalty='none', learning_rate='constant', eta0 = 0.1)\n",
    "sgd.fit(X_train, y_train)\n",
    "\n",
    "# test performance\n",
    "y_predict = sgd.predict(X_test)\n",
    "score = metrics.accuracy_score(y_test, y_predict)\n",
    "print(\"Accuracy: \", score)\n",
    "\n",
    "# performance with cross validation\n",
    "scores = cross_val_score(sgd, df, target, cv=5)\n",
    "print(\"\\nCross Validation Scores:\", scores)\n",
    "print('Mean Accuracy:', scores.mean(), ', stdDev:', scores.std(), '\\n')\n",
    "\n",
    "print(scipy.stats.describe(scores))\n",
    "\n",
    "# performance with repeated K-Fold Cross Validation\n",
    "rkf = RepeatedKFold(n_splits = 5, n_repeats = 3)\n",
    "sgd_scores = cross_val_score(sgd, df, target, cv = rkf)\n",
    "print('\\nK-Fold Cross Validation Scores:', sgd_scores)\n",
    "print('Mean Accuracy:', sgd_scores.mean(), '\\nstdDev:', sgd_scores.std(), '\\n')\n",
    "print('>> ', scipy.stats.describe(sgd_scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c434d256",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create and train random forest classifier\n",
    "rf = ensemble.RandomForestClassifier()\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "# test performance\n",
    "y_predict = rf.predict(X_test)\n",
    "score = metrics.accuracy_score(y_test, y_predict)\n",
    "print(\"Accuracy: \", score)\n",
    "\n",
    "# performance with cross validation\n",
    "scores = cross_val_score(rf, df, target, cv=5)\n",
    "print(\"\\nCross Validation Scores:\", scores)\n",
    "print('Mean Accuracy:', scores.mean(), ', stdDev:', scores.std(), '\\n')\n",
    "\n",
    "print(scipy.stats.describe(scores))\n",
    "\n",
    "# performance with repeated K-Fold Cross Validation\n",
    "rkf = RepeatedKFold(n_splits = 5, n_repeats = 3)\n",
    "rf_scores = cross_val_score(rf, df, target, cv = rkf)\n",
    "print('\\nK-Fold Cross Validation Scores:', rf_scores)\n",
    "print('Mean Accuracy:', rf_scores.mean(), '\\nstdDev:', rf_scores.std(), '\\n')\n",
    "print('>> ', scipy.stats.describe(rf_scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1cbf807",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create and train SVM\n",
    "svm = SVC()\n",
    "svm.fit(X_train, y_train)\n",
    "\n",
    "# test performance\n",
    "y_predict = svm.predict(X_test)\n",
    "score = metrics.accuracy_score(y_test, y_predict)\n",
    "print(\"Accuracy: \", score)\n",
    "\n",
    "# performance with cross validation\n",
    "scores = cross_val_score(svm, df, target, cv=5)\n",
    "print(\"\\nCross Validation Scores:\", scores)\n",
    "print('Mean Accuracy:', scores.mean(), ', stdDev:', scores.std(), '\\n')\n",
    "\n",
    "print(scipy.stats.describe(scores))\n",
    "\n",
    "# performance with repeated K-Fold Cross Validation\n",
    "rkf = RepeatedKFold(n_splits = 5, n_repeats = 3)\n",
    "svm_scores = cross_val_score(svm, df, target, cv = rkf)\n",
    "print('\\nK-Fold Cross Validation Scores:', svm_scores)\n",
    "print('Mean Accuracy:', svm_scores.mean(), '\\nstdDev:', svm_scores.std(), '\\n')\n",
    "print('>> ', scipy.stats.describe(svm_scores))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0ce76a2",
   "metadata": {},
   "source": [
    "### Comparing Classifiers using N-by-K"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4262dbbe",
   "metadata": {},
   "source": [
    "KNN vs DT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1b7cebf",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Nearest Neighbor: mean =', knn_scores.mean(), ', stdDev =', knn_scores.std())\n",
    "print('Decision Tree: mean =', dt_scores.mean(), ', stdDev =', dt_scores.std())\n",
    "print('Difference between means:', dt_scores.mean() - knn_scores.mean())\n",
    "scipy.stats.mannwhitneyu(knn_scores, dt_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e17733d1",
   "metadata": {},
   "source": [
    "DT vs RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0362b51",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Decision Tree: mean =', dt_scores.mean(), ', stdDev =', dt_scores.std())\n",
    "print('Random Forest: mean =', rf_scores.mean(), ', stdDev =', rf_scores.std())\n",
    "print('Difference between means:', rf_scores.mean() - dt_scores.mean())\n",
    "scipy.stats.mannwhitneyu(dt_scores, rf_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa74a30e",
   "metadata": {},
   "source": [
    "## II. Confusion Matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06933bde",
   "metadata": {},
   "source": [
    "### Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a67dce5",
   "metadata": {},
   "outputs": [],
   "source": [
    "train, test, trainLabels, testLabels = train_test_split(df, target, test_size=0.4, random_state=5)\n",
    "dt.fit(train, trainLabels)\n",
    "predictions = dt.predict(test)\n",
    "\n",
    "tn = np.unique(testLabels)\n",
    "\n",
    "confMat = confusion_matrix(testLabels, predictions, labels=tn)\n",
    "print(confMat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fae8f2dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import itertools\n",
    "%matplotlib widget\n",
    "\n",
    "\n",
    "def plot_confusion_matrix(cm, classes,\n",
    "                          normalize=False,\n",
    "                          title='Confusion matrix',\n",
    "                          cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "    \n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, format(cm[i, j], fmt),\n",
    "                 horizontalalignment=\"center\",\n",
    "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3045bbb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot non-normalized confusion matrix\n",
    "plt.figure(figsize=(10,10))\n",
    "plot_confusion_matrix(confMat, classes=tn,\n",
    "                      title='Confusion matrix, without normalization')\n",
    "\n",
    "# Plot normalized confusion matrix\n",
    "plt.figure(figsize=(15,15))\n",
    "plot_confusion_matrix(confMat, classes=tn, normalize=True,\n",
    "                      title='Normalized confusion matrix')\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa8f3499",
   "metadata": {},
   "source": [
    "## Tune Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27273538",
   "metadata": {},
   "outputs": [],
   "source": [
    "def runTuneTest(learner, parameters, X, y):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(df, target, test_size=0.3, random_state=2)\n",
    "    \n",
    "    accArr = []\n",
    "    \n",
    "    # divide train/test splits\n",
    "    skf = StratifiedKFold(n_splits = 5, shuffle=True, random_state=42)\n",
    "    \n",
    "    # tune hyperparameters for each fold\n",
    "    fcount = 1\n",
    "    for train, test in skf.split(X,y): \n",
    "        \n",
    "        print(\"Fold %d:\" % fcount)\n",
    "        fcount += 1\n",
    "        \n",
    "        clf = GridSearchCV(learner, parameters, cv=3)\n",
    "        clf.fit(X_train, y_train)\n",
    "            \n",
    "        print(\"Best Parameters: \", clf.best_params_)\n",
    "       \n",
    "        score = clf.score(X_test, y_test)\n",
    "        accArr.append(score)\n",
    "        \n",
    "        print(\"Tuning Set Score: %.3f \\n\" % score)\n",
    "    \n",
    "    return accArr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96f39bd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def printResults(knn, dt, rf, svm, sgd):\n",
    "\n",
    "    print(\"\\nResults\")\n",
    "    print(\"------------\")\n",
    "    print(\"Fold    KNN    DS    RF    SVM    SGD\")\n",
    "\n",
    "    for i in range(5):\n",
    "        print(\"%d       %.3f       %.3f       %.3f       %.3f       %.3f\" % (i+1, knn[i], dt[i], rf[i], svm[i], sgd[i]))\n",
    "\n",
    "    print(\"KNN Mean Accuracy: %.3f\" % np.mean(knn))\n",
    "    print(\"DT Mean Accuracy: %.3f\" % np.mean(dt))\n",
    "    print(\"RF Mean Accuracy: %.3f\" % np.mean(rf))\n",
    "    print(\"SVM Mean Accuracy: %.3f\" % np.mean(svm))\n",
    "    print(\"SGD Mean Accuracy: %.3f\" % np.mean(sgd))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b03e723",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df\n",
    "y = target\n",
    "\n",
    "# tune knn\n",
    "print(\"-----------------------\")\n",
    "print(\"Running 5-fold CV on KNN\")\n",
    "print(\"-----------------------\")\n",
    "knn = neighbors.KNeighborsClassifier()\n",
    "params = {'n_neighbors':[3, 5, 10, 12, 15, 20],'p':[1, 2], 'weights':['uniform', 'distance']}\n",
    "knn_accArr = runTuneTest(knn, params, X, y)\n",
    "\n",
    "# tune dt\n",
    "print(\"-----------------------\")\n",
    "print(\"Running 5-fold CV on DT\")\n",
    "print(\"-----------------------\")\n",
    "dt = tree.DecisionTreeClassifier()\n",
    "params = {'random_state':[0, 7, 14, 28, 35, 42, 49], 'max_depth':[3, 5, 10, 12, 15, 20]}\n",
    "dt_accArr = runTuneTest(dt, params, X, y)\n",
    "\n",
    "# tune rf\n",
    "rf = ensemble.RandomForestClassifier()\n",
    "print(\"-----------------------\")\n",
    "print(\"Running 5-fold CV on RF\")\n",
    "print(\"-----------------------\")\n",
    "params = {'n_estimators':[50, 100, 150, 200], 'bootstrap':[True, False], 'random_state':[0, 7, 14, 28, 35, 42, 49]}\n",
    "rf_accArr = runTuneTest(rf, params, X, y)\n",
    "\n",
    "# tune sgd\n",
    "sgd = SGDClassifier()\n",
    "print(\"-----------------------\")\n",
    "print(\"Running 5-fold CV on SGD\")\n",
    "print(\"-----------------------\")\n",
    "params = {'alpha':[0.0001, 0.001, 0.01, 0.1, 1], 'random_state':[0, 7, 14, 28, 35, 42, 49]}\n",
    "sgd_accArr = runTuneTest(sgd, params, X, y)\n",
    "\n",
    "\n",
    "# tune svm\n",
    "svm = SVC()\n",
    "print(\"-----------------------\")\n",
    "print(\"Running 5-fold CV on SVM\")\n",
    "print(\"-----------------------\")\n",
    "params = {'gamma':[0.0001, 0.001, 0.01, 0.1, 1], 'random_state':[0, 7, 14, 28, 35, 42, 49]}\n",
    "svm_accArr = runTuneTest(svm, params, X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "616f5abd",
   "metadata": {},
   "source": [
    "## Visualize Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6174330a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def visualizeCurve(strings, clf, ds, kRange, trainAcc, testAcc):\n",
    "\n",
    "    # generate data for validation curves\n",
    "    mean_trainAcc = np.mean(trainAcc, axis=1)\n",
    "    mean_testAcc = np.mean(testAcc, axis=1)\n",
    "    \n",
    "    # print results\n",
    "    print(strings[0])\n",
    "    print(strings[1], \", Train Accuracy, Test Accuracy\")\n",
    "    print(\"--------------------------------------------\")\n",
    "    for i in range(len(kRange)):\n",
    "        print(kRange[i], \"   %.3f   %.3f\" % (mean_trainAcc[i], mean_testAcc[i]))\n",
    "    \n",
    "    print(\"\\nMean Train Accuracy: %.3f\" % np.mean(mean_trainAcc))\n",
    "    print(\"Mean Test Accuracy: %.3f\" % np.mean(mean_testAcc))\n",
    "        \n",
    "    # generate curve\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(kRange, mean_trainAcc, label=\"Training Score\", color=\"darkorange\")\n",
    "    ax.plot(kRange, mean_testAcc, label=\"Testing Score\", color=\"navy\")\n",
    "    \n",
    "    plt.title(strings[0])\n",
    "    plt.xlabel(strings[1])\n",
    "    plt.ylabel(\"Accuracy\")\n",
    "    plt.ylim(0.0, 1.1)\n",
    "    plt.xticks(kRange)\n",
    "    \n",
    "    if strings[0] == \"SVM\":\n",
    "        plt.semilogx()\n",
    "    \n",
    "    plt.legend(loc=\"best\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0291c914",
   "metadata": {},
   "outputs": [],
   "source": [
    "knn = neighbors.KNeighborsClassifier()\n",
    "kRange = np.array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21])\n",
    "strArr = [\"KNN\", \"K-Nieghbors\"]\n",
    "trainAcc, testAcc = validation_curve(knn, X, y, param_name=\"n_neighbors\", param_range=kRange, cv=3, n_jobs=3)\n",
    "visualizeCurve(strArr, knn, df, kRange, trainAcc, testAcc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c95fe546",
   "metadata": {},
   "outputs": [],
   "source": [
    "dt = tree.DecisionTreeClassifier()\n",
    "kRange = np.array([3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70])\n",
    "strArr = [\"DT\", \"Max Depth\"]\n",
    "trainAcc, testAcc = validation_curve(dt, X, y, param_name=\"max_depth\", param_range=kRange, cv=3, n_jobs=3)\n",
    "\n",
    "# visualize results\n",
    "visualizeCurve(strArr, dt, df, kRange, trainAcc, testAcc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ae5e83f",
   "metadata": {},
   "outputs": [],
   "source": [
    "rf = ensemble.RandomForestClassifier()\n",
    "kRange = np.arange(1,201,10).astype('int')\n",
    "strArr = [\"RF\", \"Trees\"]\n",
    "trainAcc, testAcc = validation_curve(rf, X, y, param_name=\"n_estimators\", param_range=kRange, cv=3, n_jobs=3)\n",
    "\n",
    "# visualize results\n",
    "visualizeCurve(strArr, rf, df, kRange, trainAcc, testAcc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f5d3355",
   "metadata": {},
   "outputs": [],
   "source": [
    "svm = SVC()\n",
    "kRange = np.array([0.0001, 0.001, 0.01, 0.1, 1])\n",
    "strArr = [\"SVM\", \"Gamma\"]\n",
    "trainAcc, testAcc = validation_curve(svm, X, y, param_name=\"gamma\", param_range=kRange, cv=3, n_jobs=3)\n",
    "visualizeCurve(strArr, svm, df, kRange, trainAcc, testAcc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a14c16f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "sgd = SGDClassifier()\n",
    "kRange = np.array([0.0001, 0.1, 1, 1.5, 2, 3.5, 7, 10])\n",
    "strArr = [\"SGD\", \"Alpha\"]\n",
    "trainAcc, testAcc = validation_curve(sgd, X, y, param_name=\"alpha\", param_range=kRange, cv=3, n_jobs=3)\n",
    "visualizeCurve(strArr, sgd, df, kRange, trainAcc, testAcc)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
